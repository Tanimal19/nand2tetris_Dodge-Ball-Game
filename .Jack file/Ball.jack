class Ball {
    field int ballw;

    field int x, y;
    field int lengthx, lengthy;

    field int d, straightD, diagonalD;
    field boolean invert, positivex, positivey;  
   
    field int Lwall, Rwall, Uwall, Dwall;
   
    field int wall;

    constructor Ball new(int Ax, int Ay,
                         int ALwall, int ARwall, int AUwall, int ADwall) {        
        let x = Ax;     
        let y = Ay;
        let ballw = 5;
        let Lwall = ALwall;
        let Rwall = ARwall - ballw;
        let Uwall = AUwall; 
        let Dwall = ADwall - ballw;
        let wall = 0;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }

    method void draw() {
        do Screen.drawRectangle(x, y, x + ballw, y + ballw);
        return;
    }

    method int getLeft() {
        return x;
    }

    method int getRight() {
        return x + ballw;
    }

    method int getTop() {
        return y;
    }

    method int getBottom() {
        return y + ballw;
    }

    /** Computes and sets the ball's destination. */
    method void setDestination(int destx, int desty) {
        var int dx, dy, temp;
        let lengthx = destx - x;
        let lengthy = desty - y;
        let dx = Math.abs(lengthx);
        let dy = Math.abs(lengthy);
        let invert = (dx < dy);

        if (invert) {
            let temp = dx; // swap dx, dy
            let dx = dy;
            let dy = temp;
            let positivex = (y < desty);
            let positivey = (x < destx);
        }
        else {
            let positivex = (x < destx);
            let positivey = (y < desty);
        }

        let d = (2 * dy) - dx;
        let straightD = 2 * dy;
        let diagonalD = 2 * (dy - dx);

        return;
    }

    /**
     * Moves the ball one unit towards its destination.
     * If the ball has reached a wall, returns 0.
     * Else, returns a value according to the wall:
     * 1 (left wall), 2 (right wall), 3 (up wall), 4 (down wall).
     */
    method int move(int Lwall, int Rwall, int Uwall, int Dwall) {

        let Rwall = Rwall - ballw;
        let Dwall = Dwall - ballw;

        do hide();

        if (d < 0) { let d = d + straightD; }
        else {
            let d = d + diagonalD;

            if (positivey) {
                if (invert) { let x = x + 4; }
                else { let y = y + 4; }
            }
            else {
                if (invert) { let x = x - 4; }
                else { let y = y - 4; }
            }
        }

        if (positivex) {
            if (invert) { let y = y + 4; }
            else { let x = x + 4; }
        }
        else {
            if (invert) { let y = y - 4; }
            else { let x = x - 4; }
        }

        if (~(x > Lwall)) {
            let wall = 1;    
            let x = Lwall;
        }
        if (~(x < Rwall)) {
            let wall = 2;    
            let x = Rwall;
        }
        if (~(y > Uwall)) {
            let wall = 3;    
            let y = Uwall;
        }
        if (~(y < Dwall)) {
            let wall = 4;    
            let y = Dwall;
        }

        do show();

        return wall;
    }

    /**
     * Bounces off the current wall: sets the new destination
     * of the ball according to the ball's angle and the given
     * bouncing direction (-1/0/1=left/center/right or up/center/down).
     */
    method void bounce(int bouncingDirection) {
        var int newx, newy, divLengthx, divLengthy, factor;

        // dividing by 10 first since results are too big
        let divLengthx = lengthx / 10;
        let divLengthy = lengthy / 10;
        if (bouncingDirection = 0) { let factor = 10; }
        else {
            if (((~(lengthx < 0)) & (bouncingDirection = 1)) | ((lengthx < 0) & (bouncingDirection = (-1)))) {
                let factor = 20; // bounce direction is in ball direction
            }
            else { let factor = 5; } // bounce direction is against ball direction
        }

        if (wall = 1) {
            let newx = 506;
            let newy = (divLengthy * (-50)) / divLengthx;
            let newy = y + (newy * factor);
        }
        else {
            if (wall = 2) {
                let newx = 0;
                let newy = (divLengthy * 50) / divLengthx;
                let newy = y + (newy * factor);
            }
            else {
                if (wall = 3) {
                    let newy = 250;
                    let newx = (divLengthx * (-25)) / divLengthy;
                    let newx = x + (newx * factor);
                }
                else { // assumes wall = 4
                    let newy = 0;
                    let newx = (divLengthx * 25) / divLengthy;
                    let newx = x + (newx * factor);
                }
            }
        }

        do setDestination(newx, newy);
        return;
    }
}
